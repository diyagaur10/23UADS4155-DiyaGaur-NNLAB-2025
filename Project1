import numpy as np

class Perceptron:
    def __init__(self, learning_rate=0.1, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None
    
    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0
        
        for _ in range(self.epochs):
            for idx, x_i in enumerate(X):
                linear_output = np.dot(x_i, self.weights) + self.bias
                y_predicted = self.activation_function(linear_output)
                
                update = self.learning_rate * (y[idx] - y_predicted)
                self.weights += update * x_i
                self.bias += update
    
    def activation_function(self, x):
        return 1 if x >= 0 else 0
    
    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        return np.array([self.activation_function(x) for x in linear_output])

# Evaluate Perceptron on NAND and XOR datasets
def evaluate_perceptron():
    datasets = {
        "NAND": {
            "X": np.array([[0, 0], [0, 1], [1, 0], [1, 1]]),
            "y": np.array([1, 1, 1, 0])
        },
        "XOR": {
            "X": np.array([[0, 0], [0, 1], [1, 0], [1, 1]]),
            "y": np.array([0, 1, 1, 0])
        }
    }
    
    for name, data in datasets.items():
        print(f"\nTraining Perceptron for {name} dataset:")
        perceptron = Perceptron(learning_rate=0.1, epochs=1000)
        perceptron.fit(data["X"], data["y"])
        predictions = perceptron.predict(data["X"])
        print(f"Predictions for {name}: {predictions}")
        
if __name__ == "__main__":
    evaluate_perceptron()
